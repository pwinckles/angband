#------------------------------------------------------------------------------
.SUFFIXES:
#------------------------------------------------------------------------------
ifeq ($(strip $(DEVKITARM)),)
$(error "Please set DEVKITARM in your environment. export DEVKITARM=<path to>devkitARM)
endif

include $(DEVKITARM)/ds_rules

include Makefile.inc

#------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# INCLUDES is a list of directories containing extra header files
#------------------------------------------------------------------------------
TARGET		:=	$(PROGNAME)
BUILD		:=	$(CURDIR)
SOURCES		:=	$(CURDIR) $(CURDIR)/nds
DATA		:=
INCLUDES	:= $(CURDIR) $(CURDIR)/nds

#------------------------------------------------------------------------------
# any extra libraries we wish to link with the project
#------------------------------------------------------------------------------
LIBS	:= -lfat -lnds9
 
#------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level 
# containing include and lib
#------------------------------------------------------------------------------
LIBDIRS	:=	$(LIBNDS)
 
#------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add 
# additional rules for different file extensions
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
 
export DEPSDIR	:=
export VPATH	:=	$(SOURCES) \
					$(foreach dir,$(DATA),$(BUILD)/$(dir))

export LD	:=	$(CC)

BASEOBJS += main-nds.o

export OFILES	:=	$(BASEOBJS)

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include)

export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

#------------------------------------------------------------------------------
# options for code generation
#------------------------------------------------------------------------------

ARCH	:=	-mthumb -mthumb-interwork

CFLAGS	:=	-g -Wall -O2\
		-march=armv5te -mtune=arm946e-s \
		-fomit-frame-pointer -ffast-math \
		$(ARCH)

CFLAGS	+=	$(INCLUDE) -DARM9

ASFLAGS	:=	-g $(ARCH) -march=armv5te -mtune=arm946e-s
LDFLAGS	=	-specs=ds_arm9.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)

.PHONY: clean all

 DEPENDS	:=	$(OFILES:.o=.d)

#------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -fr $(OFILES) $(DEPENDS) $(TARGET).elf $(TARGET).nds

#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# main targets
#------------------------------------------------------------------------------
all: $(BUILD)

#------------------------------------------------------------------------------
$(TARGET).nds	:	$(TARGET).elf

$(TARGET).elf	:	$(foreach ofile,$(OFILES),$(BUILD)/$(ofile)) $(foreach ofile,$(OTHEROBJ),$(BUILD)/$(ofile))
	@echo linking $(notdir $@)
	@$(LD)  $(LDFLAGS) $(foreach ofile,$(OFILES),$(BUILD)/$(ofile)) \
 		$(foreach ofile,$(OTHEROBJ),$(BUILD)/$(ofile)) \
 			$(LIBPATHS) $(LIBS) -o $@

$(BUILD)/%.o	:	$(SOURCES)/%.c
	@echo $(notdir $<)
	@$(CC) -MMD -MP -MF $(DEPSDIR)/$*.d $(CFLAGS) -c $< -o $@

#------------------------------------------------------------------------------
# you need a rule like this for each extension you use as binary data
#------------------------------------------------------------------------------
%.bin.o	:	%.bin
#------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

-include $(DEPENDS)
 
#------------------------------------------------------------------------------
